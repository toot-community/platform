{{- if eq .Values.deploymentType "statefulset" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "varnish.fullname" . }}
  labels:
    {{- include "varnish.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  serviceName: {{ include "varnish.fullname" . }}
  selector:
    matchLabels:
      {{- include "varnish.selectorLabels" . | nindent 6 }}
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }} 
      labels:
        {{- include "varnish.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "varnish.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- with .Values.initContainers }}
      initContainers:
        {{- tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- include "varnish.command" . | nindent 10 }}
          env:
            - name: VARNISH_SIZE
              value: {{ .Values.varnish.size | default "256M" | quote }}
            - name: MALLOC_CONF
              value: "background_thread:true,dirty_decay_ms:1000,muzzy_decay_ms:1000,thp:never,retain:false" # prevents memory fragmentation (leaking)
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          lifecycle:
            preStop:
              exec:
                command:
                  - 'sh'
                  - '-c'
                  - |
                    # Send stop command to Varnish
                    varnishadm stop
                    # Wait for existing connections to drain (max 30s)
                    for i in $(seq 1 30); do
                      if ! varnishadm ping -q 2>/dev/null; then
                        break
                      fi
                      sleep 1
                    done
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- with .Values.volumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
            - name: varnish-config
              mountPath: /etc/varnish/default.vcl
              subPath: configuration.vcl
              readOnly: true
            {{- if .Values.persistence.enabled }}
            - name: varnish-storage
              mountPath: /var/cache/varnish
            {{- end }}
      volumes:
        {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        - name: varnish-config
          configMap:
            name: {{ include "varnish.fullname" . }}-config
            items:
              - key: configuration.vcl
                path: configuration.vcl
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: varnish-storage
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode }}
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
  {{- end }}
{{- end }}