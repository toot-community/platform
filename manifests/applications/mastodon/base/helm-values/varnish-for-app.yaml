backend:
  host: mastodon-web
  port: 3000

varnish:
  size: 256M
  cachePublicInstanceEndpoints: true # set this to false if the instance runs under limited federation mode or authorized fetch is enabled
  configuration: |
    |-
    vcl 4.1;
    
    # https://github.com/varnish/toolbox/tree/master/vcls/hit-miss
    include "hit-miss.vcl";

    backend default {
      .host = "{{ .Values.backend.host }}";
      .port = "{{ .Values.backend.port }}";
    }
    
    sub vcl_recv {
        if (req.url == "/__health") {
            return (synth(200, "OK"));
        }

        {{- if and (hasKey .Values.varnish "cachePublicInstanceEndpoints") (not .Values.varnish.cachePublicInstanceEndpoints) }}
        if (
            req.url ~ "^/api/v1/custom_emojis$" ||
            req.url ~ "^/api/v(1|2)/instance$" ||
            req.url ~ "^/api/v1/instance/translation_languages$" ||
            req.url ~ "\.(css|js)$"
        ) {
            unset req.http.Authorization;
            unset req.http.Cookie;
        }
        {{- end }}

        if (req.method == "PRI") {
            /* This will never happen in properly formed traffic (see: RFC7540) */
            return (synth(405));
        }
        
        if (!req.http.host &&
          req.esi_level == 0 &&
          req.proto ~ "^(?i)HTTP/1.1") {
            /* In HTTP/1.1, Host is required. */
            return (synth(400));
        }
        
        if (req.method != "GET" &&
          req.method != "HEAD" &&
          req.method != "PUT" &&
          req.method != "POST" &&
          req.method != "TRACE" &&
          req.method != "OPTIONS" &&
          req.method != "DELETE" &&
          req.method != "PATCH") {
            /* Non-RFC2616 or CONNECT which is weird. */
            return (pipe);
        }

        if (req.method != "GET" && req.method != "HEAD") {
            /* We only deal with GET and HEAD by default */
            return (pass);
        }
        
        if (req.http.Authorization || req.http.Cookie) {
            /* Not cacheable by default */
            return (pass);
        }
        
        return (hash);
    }

    sub vcl_deliver {
        unset resp.http.Via;
        unset resp.http.X-Varnish;
    }

    sub vcl_backend_response {
        {{- if and (hasKey .Values.varnish "cachePublicInstanceEndpoints") (not .Values.varnish.cachePublicInstanceEndpoints) }}
        if (
            bereq.url ~ "^/api/v1/custom_emojis$" ||
            bereq.url ~ "^/api/v(1|2)/instance$" ||
            bereq.url ~ "^/api/v1/instance/translation_languages$" ||
            bereq.url ~ "\.(css|js)$"
        ) {
            unset beresp.http.set-cookie;
        }
        {{- end }}

        if (bereq.uncacheable) {
            return (deliver);
        } else if (beresp.ttl <= 0s ||
          beresp.http.Set-Cookie ||
          beresp.http.Surrogate-control ~ "(?i)no-store" ||
          (!beresp.http.Surrogate-Control &&
            beresp.http.Cache-Control ~ "(?i:no-cache|no-store|private)") ||
          beresp.http.Vary == "*") {
            # Mark as "Hit-For-Miss" for the next 2 minutes
            set beresp.ttl = 120s;
            set beresp.uncacheable = true;
        }
        
        return (deliver);
    }
    
    sub vcl_synth {
        if (resp.status == 200 && req.url == "/__health") {
            set resp.http.Content-Type = "text/plain";
            set resp.body = "Varnish is healthy\n";
            return (deliver);
        }
    }